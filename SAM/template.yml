
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Description: "Creating the Services Resources for the Serverless Application"

Globals:
  Function:
    Runtime: python3.12
    Timeout: 180
    Architectures: [x86_64]

Parameters:
  Project:
    Type: String
    Default: lamablog
  Stage:
    Type: String
    Default: development
    AllowedValues:
      - development
      - production
      - testing
  VpcSG:
    Type: CommaDelimitedList
    # Type: 'List<AWS::EC2::SecurityGroup::Id>'
    Default: sg-03df20d6d58be3b3a
  PrivateSubnetIds:
    Type: CommaDelimitedList
    # Type: 'List<AWS::EC2::Subnet:id>'
    Default: "subnet-0605e6a6661666c06"

Resources:
  BackendFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Project}-${Stage}-BackendFunction"
      MemorySize: 128
      CodeUri: lambda/
      Handler: lambda_function.lambda_handler
      Layers:
        - Ref: PyMysqlLayer

      Policies:
        - AWSLambdaVPCAccessExecutionRole
        - Statement:
          - Sid: GetSecrets
            Effect: Allow
            Action:
            - secretsmanager:GetSecretValue
            Resource: '*'
          - Sid: RDSConnect
            Effect: Allow
            Action:
            - rds-db:connect
            Resource: '*'
      VpcConfig:
        SecurityGroupIds:
          # - Ref: VpcSG
          - sg-03df20d6d58be3b3a
        SubnetIds:
          # - Ref: PrivateSubnetIds
          - subnet-0605e6a6661666c06
          - subnet-092b470dba1fe0cf5
      Environment:
        Variables:
          DB_NAME: "blog"
          USERNAME: "admin"
          RDS_PROXY_HOST: "something"
      Events:
        RegisterUser:
          Type: Api
          Properties:
            Path: /register
            Method: POST
            RestApiId: !Ref BackendAPI
        LoginUser:
          Type: Api
          Properties:
            Path: /login
            Method: GET
            RestApiId: !Ref BackendAPI
        GetPosts:
          Type: Api
          Properties:
            Path: /posts
            Method: GET
            RestApiId: !Ref BackendAPI
        GetPost:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: GET
            RestApiId: !Ref BackendAPI
        AddPost:
          Type: Api
          Properties:
            Path: /posts
            Method: POST
            RestApiId: !Ref BackendAPI
        DeletePost:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: DELETE
            RestApiId: !Ref BackendAPI
        UpdatePost:
          Type: Api
          Properties:
            Path: /posts/{id}
            Method: PUT
            RestApiId: !Ref BackendAPI

  BackendAPI:
    Type: AWS::Serverless::Api
    Properties:
      # ApiKeySourceType: HEADER
      EndpointConfiguration: REGIONAL
      Name: !Sub "${Project}-${Stage}-api"
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'content-type'"
        AllowOrigin: "'*'"

  PyMysqlLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: Layers/pymysql
      CompatibleRuntimes:
        - python3.12
        - python3.11
      CompatibleArchitectures:
        - x86_64
        - arm64
    Metadata:
      BuildMethod: python3.12   # Required to have AWS SAM build this layer
      BuildArchitecture: x86_64
