name: Infrastructure setup

run-name: ${{ github.actor }} committed

on:
  push:
    branches: [ "infra", "main" ]
  # pull_request:
  #   branches: [ "main" ]

env:
  tf_dir: Terraform
  sam_dir: SAM
  stage: production
  backend_bucket: "8586-terraform-state"
  backend_key: "${{env.stage}}/terraform.tfstate"
  region: "us-east-1"
  tf_var_file: prod.tfvars

jobs:
  infra-terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Git Repo
        uses: actions/checkout@v4

      - name: Install Terraform on Runner
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: export AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.region }}

      - name: Terraform Init
        run: terraform init  -backend-config="bucket=${{env.backend_bucket}}" -backend-config="key=${{env.backend_key}}" -backend-config="region=${{env.region}}"
        working-directory: ${{env.tf_dir}}

      - name: Validate terraform
        run: terraform validate
        working-directory: ${{env.tf_dir}}

      - name: Terraform apply
        run: terraform apply -var-file=${{env.tf_var_file}} -auto-approve
        working-directory: ${{env.tf_dir}}

      # - name: Terraform destroy
      #   run: terraform destroy -var-file=${{env.tf_var_file}} -auto-approve

  upload-frontend:
    runs-on: ubuntu-latest
    needs: infra-terraform

    steps:
      - uses: actions/checkout@v4

      - name: Install awscli
        run: sudo snap install aws-cli --classic

      - name: Check vars
        run: echo $backend_key

      - name: export AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{env.region}}

      - name: Add the necessary values in respective env variables
        uses: mathiasvr/command-output@v2.0.0
        id: get-resources
            # vpc_id=$(terraform output --json -state=$state_file_name | jq -r '.vpc_id.value')
            # private_subnet_ids=$(terraform output --json -state=$state_file_name | jq -r '.private_subnet_ids.value')
            # public_subnet_ids=$(terraform output --json -state=$state_file_name | jq -r '.public_subnet_ids.value')
            # rds_proxy_endpoint=$(terraform output --json -state=$state_file_name | jq -r '.rds_proxy_identifier.value')
        with:
          run: |
            state_file_name=$backend_key
            aws s3 cp s3://$backend_bucket/$backend_key $state_file_name
            s3bucket=$(terraform output --json -state=$state_file_name | jq -r '.s3bucket.value')

            echo "S3BUCKET=$s3bucket" >> "GITHUB_ENV"

      - name: Echo bucket name
        run: echo ${{env.S3BUCKET}}
            # echo "VPC_ID=$vpc_id" >> "$GITHUB_ENV"
            # echo "PRIVATE_SUBNET_IDS=$private_subnet_ids" >> "$GITHUB_ENV"
            # echo "PUBLIC_SUBNET_IDS=$public_subnet_ids" >> "$GITHUB_ENV"
            # echo "RDS_PROXY_ENDPOINT=$rds_proxy_endpoint" >>"$GITHUB_ENV"

      - uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install react dependencies
        run: npm install
        working-directory: client

      - name: build react app
        run: npm run build
        working-directory: client

      - name: Upload the built frontend to S3
        run: aws s3 cp client/build/ s3://$S3BUCKET/ --recursive

  # infra-sam:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - upload-frontend

  #   steps:
  #     - uses: actions/checkout@v4

  #     - name: AWS Creds
  #       uses: aws-actions/configure-aws-credentials@v4
  #       with:
  #         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #         aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
  #         aws-region: us-east-1

  #     - name: Install sam cli
  #       run: pip install aws-sam-cli

  #     - name: lint sam
  #       run: sam validate & cfn-lint template.yml -a cfn_lint_serverless.rules

  #     - name: Package sam
  #       run: sam package --s3-bucket ${{ env.backend-bucket }}

  #     - name: Deploy sam
  #       run: sam deploy --config-file samconfig.toml --config-env $stage
